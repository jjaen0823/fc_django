"""
Django settings for fc_django project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/


secret_file = os.path.join(BASE_DIR, 'secrets.json')

with open(secret_file, 'r') as f:
    secrets = json.loads(f.read())


def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
BATON = {
    'SITE_HEADER': 'FC BACK OFFICE',
    'SITE_TITLE': 'FC BACK OFFICE',
    'INDEX_TITLE': 'FC ADMIN PAGE',
    'SUPPORT_HREF': 'https://google.com',
    # 'SUPPORT_HREF': 'mailto:poungki0823@gmail.com',
    'COPYRIGHT': 'copyright © 2020 Fastcampus',
    'POWERED_BY': '<a href="https://fastcampus.co.kr">Fastcampus</a>',
    'MENU_TITLE': 'Fastcampus',
    'MENU': (
        {'type': 'title', 'label': 'main', 'apps': (
            'fcuser', 'order', 'product')},
        {
            'type': 'app',
            'name': 'fcuser',
            'label': 'Fcuser',
            'icon': 'fa fa-lock',
            'models': (
                {
                    'name': 'fcuser',
                    'label': 'FcUsers'
                },
            )
        },
        # {
        #     'type': 'app',
        #     'name': 'order',
        #     'label': 'Order',
        #     'models': (
        #         {
        #             'name': 'order',
        #             'label': 'Orders'
        #         },
        #     )
        # },
        {'type': 'free', 'label': 'Order', 'default_open': True, 'children': [
            # {'type': 'model', 'label': 'Order', 'name': 'order', 'app': 'order'},
            {'type': 'free', 'label': 'Order',
                'url': '/admin/order/order/'},
            {'type': 'free', 'label': 'Order date view',
                'url': '/admin/order/order/date_view'},
        ]
        },
        {
            'type': 'app',
            'name': 'product',
            'label': 'Product',
            'models': (
                {
                    'name': 'product',
                    'label': 'Products'
                },
            )
        },

        {'type': 'free', 'label': 'Manual', 'url': '/admin/manual'},
    ),

}


INSTALLED_APPS = [
    'baton',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',

    'fcuser.apps.FcuserConfig',  # app 표기를 이름과 다르게 하려면 이렇게 해야함
    'product.apps.ProductConfig',
    'order.apps.OrderConfig',

    'baton.autodiscover',  # app을 자동으로 찾아서 관리해줌
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fc_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join('templates'),
                 os.path.join('fcuser/templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fc_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'  # 'ko-us'

TIME_ZONE = 'UTC'  # 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
